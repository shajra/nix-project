#+TITLE: Nix-based Project Tools
#+SETUPFILE: doc/links.org

[[https://github.com/shajra/nix-project/actions][https://github.com/shajra/nix-project/workflows/CI/badge.svg]]

* About this project

This project assists the setup of other projects with the [[nix][Nix package manager]].
Specifically, it provides two scripts:

- =nix-project= to help scaffold a Nix-based project and update dependencies
  with [[niv][Niv]].
- =org2gfm= to generate [[gfm][GitHub Flavored Markdown (GFM)]] from [[org][Emacs Org-mode]]
  files.

By tailoring projects to use these two scripts, we can make our projects
extremely portable. If a computer has Nix installed, our projects should be able
to download and build all the dependencies needed. For the most part this makes
the installation of Nix the only required dependency for our projects. Beyond
Nix, we can spare bothering asking users to install and configure complicated
tool chains. Nix's infrastructure supports a huge variety of language
ecosystems.

Also, Nix has a compelling approach that gives us an extremely precise and
repeatable dependency management system that covers a broad set of programming
language ecosystems.

See [[file:doc/nix.org][the provided documentation on Nix]] for more on what Nix is, why we're
motivated to use it, and how to get set up with it for this project.

Once you scaffold a new project with =nix-project=, it will have scripts
wrapping =nix-project= and =org2gfm= to manage dependencies and generate
documentation.

You can use this project directly (the author does). But it's also not a lot of
code. So you could just borrow ideas from it for your own projects.

** Managing dependencies with Nix and Niv

One of the benefits of Nix is that it pins our dependencies to specific
versions. When they are downloaded, they are parity checked with an explicitly
provided hash. Because each new version of each dependency requires a new hash,
maintaining these hashes can be a chore, especially when upgrading many
dependencies to their latest versions.

Fortunately, a tool called [[niv][Niv]] provides a command-line tool =niv= to make
upgrading Nix dependencies a single command. Niv tracks downloaded versions of
source from locations like GitHub, maintaining metadata of the latest versions
and calculated hashes in a =sources.json= file. Since this project uses itself,
you can have a look at [[file:nix/external/sources.json][its =sources.json= file]] as an example.

You could use =niv= independently, but it has some dependencies it expects to be
already installed. Although not often a problem, Niv's reliance on preexisting
installations isn't in the spirit of Nix. We want Nix to download all
dependencies for us. That's why we're using Nix in the first place. If we have
Nix installed and nothing else, then a project should just work.

The =nix-project= script provided by this project wraps =niv= such that all the
dependencies it needs are provided by Nix. It can also help scaffold a new
project to use all the scripts provided by this project.

** Documenting with Emacs Org-mode

In addition to building and distributing a project, we often want to document it
as well. Good documentation often has example snippets of code followed by the
output of an evaluation/invocation. Ideally, these snippets of output are
generated with automation, so that they are congruent with the code in the
project. This leads to some form of [[litprog][literate programming]].

The state of literate programming is not that advanced. However, [[org][Emacs' Org-mode]]
has some compelling features in the spirit of literate programming. With
Org-mode, we can evaluate code blocks and inject the results inline right below
the code. And this all can then be exported to the format of our choice.

Manually managing an Emacs installation, including requisite plugins, is
historically hard to do consistently and portably. Fortunately, Nix can build
out a precisely configured Emacs instance as a dependency without conflicting
with any installations of Emacs already on a system.

The =org2gfm= script orchestrates the configuration and build of this Emacs
instance, which then is used to  generate our documentation. Emacs is run in a
headless mode by =org2gfm=, so the fact we're using Emacs at all is hidden.

Note that as its name implies =org2gfm= only generates [[gfm][GitHub Flavored Markdown
(GFM)]] from Org-mode files. This is currently all the author needs for projects
already hosted on GitHub.

* Usage

This project should work with either GNU/Linux or MacOS operating systems. Just
follow the following steps.

#+INCLUDE: "doc/nix.org::*Nix package manager setup"

#+INCLUDE: "doc/nix.org::*Cache setup"

** Scaffolding

This project actually uses both the =nix-project= and =org2gfm= scripts that it
provides. You'll find usage of both of these scripts in the [[./support][./support]] directory.
The =support/dependencies-update= script delegates to =nix-project=, and
=support/docs-generate= delegates to =org2gfm=.

If you call =dependencies-update= (no arguments needed) it will update all of
this project's dependencies, which are specified in the
[[./nix/external/sources.json][./nix/external/sources.json]] file. And similarly, if you call =docs-generate=
(again with no arguments) all the Org-mode files will be re-evaluated and
re-exported to GFM files.

If you want to scaffold a new project with these scripts set up similarly, you
can create a new directory, go into it, and invoke the following =nix= call:

#+BEGIN_SRC sh :eval no
nix run \
    --file http://github.com/shajra/nix-project/tarball/main \
    nix-project-exe \
    --ignore-environment \
    --command nix-project --scaffold --nix `command -v nix`
#+END_SRC

Note that we're using =nix run= again, similarly to how we configured
shajra.cachix.org before. Even =support/dependencies-update= and
=support/docs-generate= are essentially calls to =nix run=. [[file:doc/nix.org][The provided
documentation on Nix]] has a section explaining more of how =nix run= works.

In the freshly scaffolded project, you'll see the following files:

#+BEGIN_EXAMPLE
  ├── nix
  │   ├── default.nix
  │   ├── sources.json
  │   └── sources.nix
  ├── README.org
  └── support
      ├── dependencies-update
      └── docs-generate
#+END_EXAMPLE

=nix/sources.json= and =nix/sources.nix= are overwritten by calls to Niv (via
=nix-project= via =dependencies-update=), but the rest of the files are yours to
modify as you see fit.

** Managing dependencies

The scripts in the =support= directory are mostly calls to ~nix run~, similarly
to what we called for scaffolding, except they reference dependencies specified
in =nix/sources.json= rather than going to GitHub directly.

In your newly scaffolded project, you can call =dependencies-update= with no
arguments to update all your dependencies. But it will likely do nothing,
because a freshly scaffolded project already has the latest dependencies.

See the [[niv][Niv]] documentation on how to manage dependencies. You can run Niv
commands directly with =dependencies-update=. For example, to run the equivalent
of ~niv show~ you can run

#+BEGIN_SRC sh :eval no
support/dependencies-update niv show
#+END_SRC

You can also use =dependencies-update= to see the help messages for both
=nix-project= and =niv=.

Using the ~--help~ switch directly with =dependencies-update= shows the help for
=nix-project=, which it delegates to.

#+NAME: help-deps-plain
#+BEGIN_SRC sh :results output :exports both
support/dependencies-update --help
#+END_SRC

#+RESULTS: help-deps-plain
#+begin_example
USAGE:

    nix-project [OPTION]... scaffold
    nix-project [OPTION]... init-update [--] [NIV_UPDATE_ARGS]...
    nix-project [OPTION]... niv NIV_COMMAND...
    nix-project [OPTION]... [--] NIV_COMMAND...

DESCRIPTION:

    A wrapper of Niv for managing Nix dependencies to assure
    dependencies Niv uses are pinned with Nix.  Niv is extended
    with two commands.

    If multiple commands are specified explicitly, 'niv' always
    has precedence, otherwise the last one is used.

    Similarly, if a switch is specified multiple times, the last
    one is used.

COMMANDS:

    scaffold     set up current directory with example scripts
    init-update  update both sources.nix (init) and sources.json
                  (shortcut for "niv init; niv update")
    niv          pass arguments directly to Niv (default command)

OPTIONS:

    -h --help            print this help message
    -t --target-dir DIR  directory of project to manage
                          (default: current directory)
    -S --source-dir DIR  directory relative to target for
                          Nix files (default: nix)
    -g --github-token    file with GitHub API token (default:
                          ~/.config/nix-project/github.token)
    -N --nix PATH        filepath of 'nix' executable to use
    --                   send remaining arguments to Niv

    'nix-project' pins all dependencies except for Nix itself,
     which it finds on the path if possible.  Otherwise set
     '--nix'.

#+end_example

Since =nix-project= can pass through commands to =niv= we can see the help for
Niv with the following command:

#+NAME: help-deps-niv
#+BEGIN_SRC sh :results output :exports both
support/dependencies-update niv --help
#+END_SRC

#+RESULTS: help-deps-niv
#+begin_example
niv - dependency manager for Nix projects

version: 0.2.19

Usage: niv [-s|--sources-file FILE] [--no-colors] COMMAND

Available options:
  -s,--sources-file FILE   Use FILE instead of nix/sources.json
  --no-colors              Don't use colors in output
  -h,--help                Show this help text
  --version                Print version

Available commands:
  init                     Initialize a Nix project. Existing files won't be
                           modified.
  add                      Add a GitHub dependency
  show                     
  update                   Update dependencies
  modify                   Modify dependency attributes without performing an
                           update
  drop                     Drop dependency
#+end_example

** Evaluating/exporting documentation

A freshly scaffolded project will have a =README.org= file in its root. This
file has an example call to =whoami= in it. When you call
=support/docs-generate=, you'll see that the =README.org= file is modified in
place to include the result of the =whoami= call. Additionally, a =README.md=
file is exported.

Notice that the =support/docs-generate= script includes the ~pkgs.coreutils~
package. This is the package that provides the =whoami= executable. You
explicitly control what executables are in scope for evaluating your code
snippets. ~pkgs~ provides all the packages that come with the [[nixpkgs][Nixpkgs
repository]], but you can always define your own packages with a Nix expression.

#+BEGIN_QUOTE
*_NOTE_*: Since =docs-generate= writes over files in-place, source control is
highly recommended to protect against the loss of documentation.
#+END_QUOTE

The =org2gfm= script that =docs-generate= delegates to does not support all
Emacs Org-mode evaluation/export features. See [[file:doc/org2gfm-design.org][doc/org2gfm-design]] for a
discussion of =org2gfm='s design and recommended usage.

For reference, here's the documentation from the ~--help~ switch for
=docs-generate= / =org2gfm=:

#+NAME: help-docs
#+BEGIN_SRC sh :results output :exports both
support/docs-generate --help
#+END_SRC

#+RESULTS: help-docs
#+begin_example
USAGE: org2gfm [OPTION]...  [FILE]...

DESCRIPTION:

    Uses Emacs to export Org-mode files to GitHub Flavored
    Markdown, which are written to sibling ".md" files.  If no
    files are specified, then all '*.org' files found recursively
    from the current working directory are used instead.

OPTIONS:

    -h --help           print this help message
    -b --path-bin       include /bin on path (for /bin/sh)
    -e --evaluate       evaluate all SRC blocks before exporting
    -E --no-evaluate    don't evaluate before exporting (default)
    -N --nix PATH       filepath to 'nix' binary to put on PATH
    -i --ignore REGEX   ignore matched paths when searching
    -k --keep-going     don't stop if Babel executes non-zero
    -K --no-keep-going  stop if Babel executes non-zero (default)
    -y --yes            answer "yes" to all queries for evaluation
    -n --no             answer "no" to all queries for evaluation

    This script is recommended for use in a clean environment
    with a PATH controlled by Nix.  This helps make executed
    source blocks more deterministic.  However, if the source
    blocks need to execute Nix commands, it's best to use the Nix
    version already installed on the system, rather than a pinned
    version.  This is what the '-N' option is for.

    If using both '-e' and '-E' options the last one is overriding
    (useful for automation/defaults).

    Note, the '-e' switch evaluates the Org-mode file in-place.
    No evaluation occurs during the export to Markdown, which
    will have the same blocks as the Org-mode file.


#+end_example

** GitHub rate limiting of Niv calls

Many dependencies managed by Niv may come from GitHub. GitHub will rate limit
anonymous API calls to 60/hour, which is not a lot. To increase this limit, you
can make a [[github-token][personal access token]] with GitHub. Then write the generated token
value in the file =~/.config/nix-project/github.token=. Make sure to restrict
the permissions of this file appropriately.

** Next steps

At this point, you can create a skeleton project with dependencies and generate
documentation for it. But you need to know more about Nix and the Nix expression
language to build your own projects with Nix.

the =nix/default.nix= in the skeleton project derives packages from
=sources.json=. You can make more Nix expressions in this directory and
reference them in =nix/default.nix=.

If you haven't looked it yet, in the [[./doc][./doc]] directory, this project provides

- [[file:doc/nix.org][some documentation on Nix]] to get you started
- [[file:doc/org2gfm-design.org][design and recommended usage of =org2gfm=]].

Finally, the [[nix-learn][official Nix documentation]] is comprehensive, and can help you make
your own Nix expressions using the Nixpkgs repository as a foundation.
Particularly useful are the [[nix-manual][Nix manual]] and [[nixpkgs-manual][Nixpkgs manual]].

* Release

The "main" branch of the repository on GitHub has the latest released version
of this code. There is currently no commitment to either forward or backward
compatibility.

"user/shajra" branches are personal branches that may be force-pushed to. The
"main" branch should not experience force-pushes and is recommended for
general use.

* License

All files in this "nix-project" project are licensed under the terms of GPLv3 or
(at your option) any later version.

Please see the [[./COPYING.md][./COPYING.md]] file for more details.

* Contribution

Feel free to file issues and submit pull requests with GitHub.

There is only one author to date, so the following copyright covers all files in
this project:

Copyright © 2019 Sukant Hajra
