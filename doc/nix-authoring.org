#+title: Managing a Project with Nix Flakes
#+setupfile: internal/links.org

* Org-mode setup :noexport:

#+name: cleanup
#+begin_src sh :dir .. :results output silent
rm --recursive --force my-project
#+end_src

* About this document

This document shows goes over how to manage a software project using the
following in conjunction:
- the [[nix][Nix package manager]]
- an experimental feature of Nix called [[nix-flakes][flakes]]
- this project, Nix-project.

#+begin_quote
*_WARNING:_* The decision to use an experimental feature such as flakes comes
with trade-offs. Please read the [[file:nix-motivation.org][provided supplemental documentation on Nix]] if
you're unfamiliar with flakes or these trade-offs.
#+end_quote

Nix-project provides library support that helps ease the ergonomics of using Nix
with flakes. We'll try to explain using Nix-project, but not in a way that too
much obscures how to use flakes directly.


* Scaffolding

Nix-project actually uses itself and all the features it provides, so you look
through this repository for a concrete example of how to do what's discussed in
this document.

If you want to scaffold a new project set up similarly, you can create a new
directory, go into it, and invoke the following =nix= call:

#+begin_src :dir .. sh :eval no
nix --refresh run github:shajra/nix-project/main \
    -- --target-dir my-project
#+end_src

#+name: scaffold
#+begin_src sh :dir .. :results output :exports results
nix --refresh run .#nix-scaffold -- --target-dir my-project
#+end_src

#+RESULTS: scaffold
: SUCCESS: Scaffolded Nix project at /home/tnks/src/shajra/nix-project/my-project

The =--refresh= just assures that you get the latest version of the scaffolding
script from the internet in case you've made this =nix run= invocation before.

In the freshly scaffolded project, you'll see the following files:

#+name: scaffold-tree
#+begin_src sh :dir .. :results output :exports results
tree --noreport my-project
#+end_src

#+RESULTS: scaffold-tree
#+begin_example
my-project
├── default.nix
├── flake.nix
├── nix
│   ├── build-forall.nix
│   ├── build-foreach.nix
│   ├── compat.nix
│   ├── overlay-build.nix
│   └── overlay-deps.nix
├── README.org
└── support
    └── docs-generate
#+end_example

=README.org= and =support/docs-generate= are used to document your project and
are discussed in another document.

#+todo: clean up documentation on documentation

=default.nix= and =nix/compat.nix= provide non-flakes support for users of your
project who have decided not to enable flakes in their Nix installation. They
can consume your project as a conventional Nix expression. Using Nix without
flakes is beyond the scope of this document.




* Org-mode Cleanup :noexport:

Cleans directory for run:

#+call: cleanup()
