#+title: Deciding to use Nix
#+setupfile: internal/links.org

* About this document

This document introduces the [[nix][Nix package manager]] and highlights some motivations
to use Nix. It also covers some problems to be aware of when deciding on whether
or how to use Nix.

This project not only uses Nix, but furthermore a still-experimental feature of
Nix called /flakes/.

#+begin_quote
*_WARNING:_* The decision to use an experimental feature such as flakes with
this project comes with trade-offs, discussed in the latter sections of this
document. Please read this material to make an informed decision for your
context and avoid later regrets.
#+end_quote

* Problems addressed by Nix

The following sections cover various problems that Nix's architecture addresses.

** Managed build

When dealing with a new software project, wrangling dependencies can be a chore.
Modern build systems for specific programming languages often don't manage
system dependencies. For example, Python's =pip install= will download and
install needed Python dependencies, but may fail if the system doesn't provide C
shared libraries needed for foreign function calls. Complicating matters,
different operating systems have different names for these system packages and
install them with different commands (=apt=, =dnf=, etc.). This makes automation
difficult. Consequently, many software projects only provide documentation as a
surrogate for automation, which creates even more room for error.

** Reliable build

Some projects might have all the automation necessary for building, but due to
subtle differences among systems, what builds on one system might not build on
another.

For example, environment variables often can influence the behavior of the
commands called by scripts. It's hard to lock down these variables on every
system where something might be built.

** Reliable deployment

Once we've built some software and are ready to deploy it, it's not always
obvious how to copy this built software to another system. For example, if the
software dynamically links to system libraries, we need to know whether those
libraries are on the system we intend to copy to.

** Version conflicts

Another complication we face is when an operating system only allows one version
of a system library to be installed at a time. When this happens, we have to
make difficult choices if we need two programs that require different versions
of a system dependency.

** Polyglot programming

It's also tedious to synthesize libraries and programs from different language
ecosystems to make a new program for a unified user experience. For example, the
world of machine learning programming often requires the mixing C/C++, Python,
and even basic shell scripts. These hybrid applications have a tendency to be
fragile.

** Completely cached builds

Various build systems provide repositories for pre-built packages, which helps
users save time by downloading packages instead of building them. What we really
want is this experience, but unified across all programming language ecosystems
and system dependencies.

Note, this is what traditional package managers like DNF and APT accomplish. But
there's an ergonomic difficulty to turning all software into standard Linux
packages. To start, there are too many Linux distributions with too many package
managers. Secondly, most of the package managers require adherence to a set of
policies for everything to work well together. For example, many distributions
respect the [[fhs][Filesystem Hierarchy Standard (FHS)]]. Confusion around policies have
led many developers to steer away from package managers and towards
container-based technologies like Docker, despite the overhead and drawback of
these systems.

* Nix at a high level

Nix addresses all the problems discussed above.

To build or install any project, we should be able to start with only the Nix
package manager installed. No other library or system dependency should be
required to be installed or configured.

Even if we have a library or system dependency installed, it shouldn't interfere
with any build or installation we want to do.

Our build should get everything we need, all the way down to system-level
dependencies, irrespective of which programming language the dependencies has
been authored in. If anything has been pre-built, we should download a cached
result.

Above and beyond the problems discussed above, Nix has a precisely deterministic
build, broadly guaranteeing reproducibility. If the package builds on one
system, it should build on all systems, irrespective of what's installed or not.
Furthermore, multiple systems building the same package independently should
generally produce bit-for-bit identical builds.

Nix also is able to conveniently copy the transitive closure of a package all
its dependencies ergonomically from one system to another.

In broad strokes, Nix is a technology that falls into two categories:

- package manager
- build tool.

** Nix the package mangager

As a package manager, Nix does what most package managers do. Nix provides a
suite of command-line tools to search registries of known packages, as well as
install and uninstall them.

Packages can provide both executables and plain files alike. Installation just
entails putting these files into a good location for both the package manager
and the user. Nix has an elegant way of storing everything under =/nix/store=,
discussed more below.

Importantly, the Nix package manager doesn't differentiate between system-level
installations and user-level installations. All builds and installations are by
nature hermetic and can't conflict with one another.

As a convenience, Nix has tools to help users put the executables provided by
packages provided on their environment's =PATH=. This way, users don't have to
deal with finding executables to call installed in =/nix/store=.

** Nix the build system

Nix conjoins the features of a package manager with those of a build tool. If a
package or any of its dependencies (including low-level system dependencies)
aren't found in a /Nix registry/, they are built locally. Otherwise, the
pre-built package cached in the Nix registry is downloaded rather than built.
All we need to build or download any package is the Nix package manager and a
network connection.

Every Nix package is specified by a /Nix expression/, written in a small
programming language also called Nix. This expression specifies everything
needed to build the package down to the system-level. These expressions are
saved in files with a ".nix" extension.

Some software provides these Nix expressions alongside as part of their source.
If some software doesn't provide a Nix expression, you can always use an
externally authored expression.

What makes Nix special is that these expressions specify a way to build that's

- precise
- repeatable
- guaranteed not to conflict with anything already installed

For some, it's easy to miss the degree to which Nix-built packages are precise
and repeatable. If you build a package from a Nix expression on one system, and
then build the same expression on a system of the same architecture, you should
get the same result. In most cases, the built artifacts will be identical
bit-for-bit.

This degree of precision is accomplished by a system of thorough hashing. In
Nix, the dependencies needed to build packages are also themselves Nix packages.
Every Nix expression has an associated hash that is calculated from the hashes
of package's dependencies and build instructions. When we change this dependency
(even if only by a single bit), the hash for the Nix expression changes. This
cascades to a different calculated hash for any package relying on this
dependency. But if nothing changes, the same hashes will be calculated on all
systems.

The repeatability and precision of Nix enables caching services, which for Nix
are called /substitutors/. Nix has standard one at https://cache.nixos.org, but
there are third-party ones as well, like [[cachix][Cachix]]. Before building a package,
the hash for the package is calculated. If any configured substitutor has a
build for the hash, it's pulled down as a substitute. A certificate-based
protocol is used to establish trust of substitutors. Between this protocol, and
the algorithm for calculating hashes in Nix, you can have confidence that a
package pulled from a substitutor will be identical to what you would have built
locally.

Finally, all packages are stored in =/nix/store= by their hash. This simple
scheme allows us to have multiple versions of the same package installed with no
conflicts. References to dependencies all point back to the desired version in
=/nix/store= they need. This is not to say that running multiple programs
concurrently based on different versions can't cause problems, but at least the
flexibility to do so is in the user's hands.

** Nixpkgs

Nix expressions help us create extremely controlled environments within which we
can build packages precisely. However, Nix still calls the conventional build
tools of various programming language ecosystems. Under the cover, Nix is
ultimately an extremely controlled execution of Bash scripts orchestrating these
tools.

To keep the Nix expressions for each package concise, the Nix community curates
a [[nixpkgs][Git repository of Nix expressions called Nixpkgs]]. Most Nix expressions for
packages will start with a snapshot of Nixpkgs as a dependency, which provides
library support to help keep Nix expressions compact.

This way, the complexity of shell scripting and calls to language-specific
tooling can be kept largely hidden away from general Nix authors. The Nix
language lets us work with packages from any language ecosystem in a uniform
way.

* Problems in paradise

Having covered so many of Nix's strengths, it's important to be aware of some
problems the Nix community is still working through.

** Nixpkgs takes time to learn

There are parts of Nix that are extremely simple. For example, there's an
elegance to the hashing calculation and how =/nix/store= is used. Furthermore
the Nix language itself has a small footprint, which eases learning it.

However, because of the complexity of all the programming language ecosystems
out there, there are a /lot/ of supporting libraries in Nixpkgs to understand.
There's over two million lines of Nix in Nixpkgs, some auto-generated,
increasing the odds of getting lost in it.

The [[nixpkgs-manual][official Nixpkgs manual]] only seems to cover the surface of what package
authors really need to know. Invariably, people seem to master Nix by exploring
the source code of Nixpkgs, supplemented by example projects for reference.

Various people have attempted to fill the gap with documentation and tutorials.
Even this document you're reading now is one such attempt. However, we're
missing searchable index of all the critical functions in Nixpkgs for people to
explore. Something as simple as parsed [[docstring][docstrings]] as an extension of the Nix
language would go a long way, which would be far easier to implement than
something more involved like a type system for the Nix language.

** Confusion of stability

The Nix community seems divided into the following camps:

- those who want new features and fixes to known grievances
- those who want stable systems based on Nix in industrial settings.

It's not necessary for these groups to be at odds. Unfortunately, Nix has
released new experimental features in a way that has created confusion of how to
build stable systems with Nix.

*** Nix 2.0 and the new =nix= command

An early complaint of Nix was the non-intuitiveness of Nix's command-line tools.
To address this, Nix 2.0 introduces a unifying tool called =nix=, but it only
covered a subset of the functionality of the other tools. In practice, it ended
up just being yet another tool to learn.

If you look at the manpage for =nix= there's a clear warning at the top:

#+BEGIN_QUOTE
Warning: This program is experimental and its interface is subject to change.
#+END_QUOTE

This warning has been there since 2018 when Nix 2.0 was released.

However, =nix repl= is the only way to get to a [[repl][REPL session]] in Nix, which is an
important tool for any programming language. The old tool providing a REPL
(=nix-repl=) has been removed from Nixpkgs.

This means that technically, the community is strongly encouraging, if not
forcing, users to use an experimental tool and providing no guidance on how to
use Nix with some assurance of stability.

Some may say that =nix repl= is actually stable, and that it's the other
sub-commands that are really experimental. That's fine, but which ones?

When getting help on Nix forums the vast majority of people say that it's fine
too use =nix=. However, Nix 2.4 did indeed change the API of these sub-commands,
which has absolutely broken industrial scripts calling =nix=.

There is no warning of this risk beyond what's atop the manpage, which most
users have been training one another to ignore.

*** Nix 2.4 and flakes

Though Nix expressions have an incredible potential to be precise and
reproducible, there has always been some backdoors to break the reliability of
builds. For example, Nix expressions have the potential to evaluate differently
depending on the setting of some environment variables like =NIX_PATH=.

The motivation for these relaxations of determinism has largely been to have a
quick way to let personal computing users have a convenient way to manage their
environments. Some people are careful to avoid accidentally having
non-deterministic builds. Still, accidents have occurred frequently enough for
the community to want better. It's frustrating to have a broken build because of
an environment variable.

Nix 2.4 corrected for this by introducing an experimental feature called
/flakes/. Users still have a largely ergonomic way to manage their environments,
but builds are strictly deterministic. Determinism is a large reason many turn
to Nix in the first place.

A nice benefit of strictly enforces determinism is the ability to cache
evaluations of Nix expressions, which can be expensive to compute.

All this is generally good news. Flakes address problems that industrial users
of Nix have long had to deal with.

However, not only is Nix 2.4 not yet the standard in NixOS. NixOS users have to
opt in to using Nix 2.4, but even if they do, flakes are an experimental feature
that users need to explicitly enable. As an experimental feature, there's low
confidence the API for flakes might change in the future.

This puts industrial Nix users in a hard place. Not using flakes and instead
coaching coworkers and customers on how to use Nix safely

- increases the likelihood of defects as people make honest mistakes
- reduces the likelihood of adoption, because people get frustrated with the
  nuances of these corner cases.

However, if industrial users move to flakes to address these problems, we get no
confidence that automation relying on flakes won't break with future releases.
The entire API is technically experimental.

Worse yet, Nix has a history of leaving features experimental years after
release. This lulls people into the false confidence of stability as more and
more people ignore the warning that the API might change.

* The choice to use flakes

This project uses flakes. The benefits seems to outweigh the risks of
instability. This is not a choice made lightly, and this document is an exercise
of due diligence to inform users of the compromise made.

To buffer this compromise, this project uses and encourages the use of the
[[nix-flake-compat][flake-compat]] project, which enables an end user who has opted not to enable
flakes to still use this project.

With Flake-compat, end users will have a normal (non-flake) Nix expression they
can evaluate. However, since dependencies are managed with flakes, the project
maintainer must have flakes enabled to manage dependencies (for example,
updating to the latest dependencies with =nix flake update=).

We can already feel some stress points from the mass adoption of an experimental
API. The latest release of NixOS 21.11 only has Nix 2.4 in it for flakes
support. Meanwhile, Nix itself has moved on to Nix 2.8. The flakes API also saw
a change from 2.7 to 2.8 (the attribute paths for default packages,
applications, and templates). We luck out that the change was backwards
compatible with 2.4, with a deprecation warning.

What would be preferable is for this backwards compatibility to continue until
Nix 2.8 has reached an official NixOS release. However, this guarantee is of
backwards compatibility is a shift away from the warning currently in the =nix=
manpage. Instead, this backwards compatibility is just an unofficial courtesy by
the developers of new and experimental features.

It seems clear that a huge number of users are enthusiastically jumping into
flakes. Without some better assurances of API stability, the Nix community
further risks the loss of adoption in industrial settings. This is a heavy price
to pay for a technology with so much potential to help get so many chaotic
systems under better control.
