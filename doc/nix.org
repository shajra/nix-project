#+TITLE: Nix Setup and Usage
#+LINK: cachix https://cachix.org
#+LINK: nix-env https://nixos.org/nix/manual/#sec-nix-env
#+LINK: nix-expr https://nixos.org/nix/manual/#ch-expression-language
#+LINK: nix https://nixos.org/nix
#+LINK: nix-install https://nixos.org/nix/manual/#chap-installation
#+LINK: nix-learn https://nixos.org/learn.html
#+LINK: nix-manual https://nixos.org/nix/manual
#+LINK: nix-tutorial https://github.com/shajra/example-nix/tree/master/tutorials/0-nix-intro
#+LINK: nixpkgs https://github.com/NixOS/nixpkgs
#+LINK: nixpkgs-manual https://nixos.org/nixpkgs/manual

* Org-mode Setup :noexport:

  This document is written in a project-agnostic way so it can be copied to
  other projects using Nix.

** Variables

   These are some references that need to be changed to use this document in
   other projects.

   #+MACRO: get (eval (concat $2 (alist-get '$1 (car (read-from-string (f-read "nix.org.el")))) $2))
   #+MACRO: package-attr {{{get(package-attr, "\"")}}}
   #+MACRO: package-name {{{get(package-name, "\"")}}}
   #+MACRO: package-exe {{{get(package-exe, "=")}}}

   #+NAME: get
   #+BEGIN_SRC emacs-lisp :var arg="" :eval yes :results silent
     (alist-get (intern arg) (car (read-from-string (f-read "nix.org.el"))))
   #+END_SRC

** Formatting help

   This snippet is used to crop down results of evaluating source code blocks
   as a post-processing step.

   #+NAME: crop
   #+BEGIN_SRC emacs-lisp :var text="" :var first-n=5 :var last-n=5 :results silent
     (let* ((ls         (split-string text "\n"))
            (first-ls   (-take first-n ls))
            (rest-first (-drop first-n ls))
            (rest-last  (-drop-last (+ 1 last-n) rest-first))
            (last-ls    (-take-last (+ 1 last-n) rest-first)))
       (string-join
        (if rest-last
            (append first-ls '("â€¦") last-ls)
          (append first-ls last-ls))
        "\n"))
   #+END_SRC

** Setup action

   #+NAME: cleanup
   #+BEGIN_SRC shell :dir .. :results output silent
     rm -rf result* || true
     rm -rf nix-profile || true
   #+END_SRC

* How this project uses Nix

  This project uses the [[nix][Nix package manager]] to download all necessary
  dependencies and build everything from source.

  Because Nix is more than a build system, notably a full package manager, the
  final build is actually a Nix package that you can install with the Nix
  package manager if you like.

  Builds from this project are cached at [[cachix][Cachix]], a service that caches
  pre-built Nix packages. If you don't want to wait for a full local build,
  setting up Cachix is recommended.

  The various files with a ".nix" extension are Nix files, each of which
  contains an expression written in the [[nix-expr][Nix expression language]] used by the Nix
  package manager. If you get proficient with this language, you can compose
  expressions together to make your own packages from others (if that's useful
  to you).

* Motivation to use Nix

  When making a new software project, wrangling dependencies can be a chore.
  For instance, GNU Make's makefiles often depend on executables and libraries
  that may or may not be on a system. The makefiles in most projects don't
  assist with getting these dependencies at usable versions. And many projects
  just provide error-prone instructions for how to get and install these
  dependencies manually.

  Nix can build and install projects in a way that's precise, repeatable, and
  guaranteed not to conflict with anything already installed. Nix can even
  concurrently provide multiple versions of any package without conflicts.

  Furthermore, Nix supports building for a variety of languages. In many cases,
  Nix picks up where language-specific tooling stop, layering on top of the
  tools and techniques native to those ecosystems. Nix expressions are designed
  for composition, which helps integrate packages from dependencies that may
  not all come from the same language ecosystem. These dependencies in Nix are
  themselves Nix packages.

  To underscore how repeatable and precise Nix builds are, it helps to know
  that Nix uniquely identifies packages by a hash derived from the hashes of
  requisite dependencies and configuration. This is a recursive hash
  calculation that assures that the smallest change to even a distant
  transitive dependency changes the hash. When dependencies are downloaded,
  they are checked against the expected hash. Most Nix projects (this one
  included) are careful to pin dependencies to specific versions/hashes.
  Because of this, when building the same project with Nix on two different
  systems, we get an extremely high confidence we will get the same output,
  often bit-for-bit. This is a profound degree of precision relative to other
  popular package managers.

  The repeatability and precision of Nix enables caching services, which for
  Nix are called /substituters/. Cachix is one such substituter. Before
  building a package, the hash for the package is calculated. If any configured
  substituter has a build for the hash, it's pulled down as a substitute. A
  certificate-based protocol is used to establish trust of substituters.
  Between this protocol, and the algorithm for calculating hashes in Nix, you
  can have confidence that a package pulled from a substituter will be
  identical to what you would have built locally.

  All of this makes Nix an attractive tool for managing almost any software
  project.

* Installation and Setup
** Nix package manager setup

   #+BEGIN_QUOTE
   *_NOTE:_* You don't need this step if you're running NixOS, which comes with
   Nix baked in.
   #+END_QUOTE

   If you don't already have Nix, the official installation script should work
   on a variety of UNIX-like operating systems. The easiest way to run this
   installation script is to execute the following shell command as a user
   other than root:

   #+BEGIN_SRC shell :eval no
     curl https://nixos.org/nix/install | sh
   #+END_SRC

   This script will download a distribution-independent binary tarball
   containing Nix and its dependencies, and unpack it in =/nix=.

   The Nix manual describes [[nix-install][other methods of installing Nix]] that may suit you
   more.

** Cache setup

   It's recommended to configure Nix to use shajra.cachix.org as a Nix
   /substituter/. This project pushes built Nix packages to [[cachix][Cachix]] as part of
   its continuous integration. Once configured, Nix will pull down these
   pre-built packages instead of building them locally.

   You can configure shajra.cachix.org as a substituter with the following
   command:

   #+BEGIN_SRC shell :eval no
     nix run \
         --file https://cachix.org/api/v1/install \
         cachix \
         --command cachix use shajra
   #+END_SRC

   This will perform user-local configuration of Nix at
   =~/.config/nix/nix.conf=. This configuration will be available immediately,
   and any subsequent invocation of Nix commands will take advantage of the
   Cachix cache.

   If you're running NixOS, you can configure Cachix globally by running the
   above command as a root user. The command will then configure
   =/etc/nixos/cachix/shajra.nix=, and the output will explain how to tie this
   configuration into your normal NixOS configuration.

* Working with Nix

  Though covering Nix comprehensively is beyond the scope of this document,
  we'll go over a few commands illustrating using Nix with this project.

** Searching Nix files

   Each of the Nix files in this project (ones with a ".nix" extension)
   contains exactly one Nix expression. This expression evaluates to one of the
   following values:

   - simple primitives and functions
   - derivations of packages that can be built and installed with Nix
   - containers of values, allowing a single value to provide more
     than one thing (these containers can nest).

   Once you learn the Nix language, you can read these files to see what kind
   of values they build. We can use the =nix search= command to see what
   package derivations a Nix expression contains. For example from the
   top-level of this project, we can execute:

   #+BEGIN_SRC shell :dir .. :results output silent :exports none
     nix show-derivation --file default.nix >/dev/null 2>&1
   #+END_SRC

   #+BEGIN_SRC shell :eval no
     nix search --file default.nix --no-cache
   #+END_SRC

   #+BEGIN_SRC shell :dir .. :results output :exports results :post crop(text=*this*, first-n=9, last-n=0)
     nix search --file default.nix --no-cache | ansifilter
   #+END_SRC

   #+RESULTS:
   : * nix-project-exe (nix-project)
   :   Script to scaffold and maintain dependencies for a Nix project
   :
   : * nix-project-lib.lib-sh (lib.sh)
   :   Common shell functions
   :
   : * nix-project-org2gfm (org2gfm)
   :   Script to export Org-mode files to GitHub Flavored Markdown (GFM)
   :

   If you don't get the results above, see the [[#nix-drv][section on understanding
   derivations]] for an explanation of the likely problem and a workaround.

   Note that because for extremely large Nix expressions, searching can be
   slow, =nix search= by defaults uses an indexed cache. This cache can be
   explicitly updated. However, because small local projects rarely have that
   many package derivations, the =--no-cache= switch is used above to bypass
   the cache. This guarantees accurate results that are fast enough. Otherwise,
   you will only get hits for the last Nix expression cached, which may be
   surprising.

   The output of =nix search= is formatted as

   #+BEGIN_EXAMPLE
     ,* attribute-path (name-of-package)
       Short description of package
   #+END_EXAMPLE

   /Attribute paths/ are used to select values from a Nix set containing
   multiple package derivations. If the Nix expression evaluates to a single
   derivation (not in a container), the attribute path will be missing from the
   =nix search= result.

   Many Nix commands evaluate Nix files. If you specify a directory instead,
   the command will look for a =default.nix= file within to evaluate. So from
   the top-level of this project, we could use =.= instead of =default.nix=:

   #+BEGIN_SRC shell :eval no
     nix search --file . --no-cache
   #+END_SRC

   In the remainder of this document, we'll use =.= instead of =default.nix=
   since this is conventional for Nix.

** Building Nix expressions

   From our execution of =nix search= we can see that a package named
   {{{package-name}}} can be accessed with the {{{package-attr}}} attribute
   path in the Nix expression in the top-level =default.nix=.

   We can build this package with =nix build= from the top-level:

   #+BEGIN_SRC shell :dir .. :results output silent :noweb yes
     nix build --file . <<get("package-attr")>>
   #+END_SRC

   The positional arguments to =nix build= are /installables/, which can be
   referenced by attribute paths. If you supply none then all top-level
   attributes are built by default.

   All packages built by Nix are stored in =/nix/store=. Nix won't rebuild
   packages found there. Once a package is built, its directory in =/nix/store=
   is read-only (until the package is deleted).

   After a successful call of =nix build=, you'll see some symlinks
   for each package requested in the current working directory. These symlinks
   by default have a name prefixed with "result" and point back to the
   respective build in =/nix/store=:

   #+BEGIN_SRC shell :dir .. :results output :exports both
     readlink result*
   #+END_SRC

   #+RESULTS:
   : /nix/store/pjrk2cxnf2s483j48z1vakp206y3lnf1-nix-project

   Following these symlinks, we can see the files the project provides:

   #+BEGIN_SRC shell :dir .. :results output :exports both :post crop(text=*this*, first-n=10, last-n=0)
     tree -l result*
   #+END_SRC

   #+RESULTS:
   : result
   : â””â”€â”€ bin
   :     â””â”€â”€ nix-project
   :
   : 1 directory, 1 file

   It's common to configure these "result" symlinks as ignored in source
   control tools (for instance, within a Git =.gitignore= file).

   =nix build= has a =--no-link= switch in case you want to build packages
   without creating "result" symlinks. To get the paths where your packages are
   located, you can use =nix path-info= after a successful build:

   #+BEGIN_SRC shell :dir .. :results output :exports both :noweb yes
     nix path-info --file . <<get("package-attr")>>
   #+END_SRC

   #+RESULTS:
   : /nix/store/pjrk2cxnf2s483j48z1vakp206y3lnf1-nix-project

** Running commands

   You can run a command from a package in a Nix expression with =nix run=. For
   instance, to get the help message for the {{{package-exe}}} executable
   provided by the {{{package-name}}} package selected by the
   {{{package-attr}}} attribute path, we can call the following:

   #+BEGIN_SRC shell :dir .. :results output :exports both :noweb yes :post crop(text=*this*, first-n=5, last-n=0)
     nix run \
         --file . \
         <<get("package-attr")>> \
         --command <<get("package-exe")>> --help
   #+END_SRC

   #+RESULTS:
   : USAGE:
   :
   :     nix-project [OPTION]... --scaffold
   :     nix-project [OPTION]... --upgrade
   :     nix-project [OPTION]... --niv -- COMMAND...
   : â€¦

   You don't even have to build the package first with =nix build= or mess
   around with the "result" symlinks. =nix run= will build the project if it's
   not yet been built.

   Again, as with =nix build= attribute paths are specified as positional
   arguments to select packages.

   The command to run is specified after the =--command= switch. =nix run= runs
   the command in a shell set up with a =PATH= environment variable including
   all the =bin= directories provided by the selected packages.

   =nix run= also supports an =--ignore-environment= flag that restricts =PATH=
   to only packages selected, rather than extending the =PATH= of the outside
   environment. With =--ignore-environment=, the invocation is more sandboxed.

** Installing and uninstalling programs

   We've seen that we can build programs with =nix build= and then execute
   programs using the "result" symlink (=result/bin/*=). Additionally, we've
   seen that you can run programs with =nix run=. But these additional steps
   and switches/arguments can feel extraneous. It would be nice if we could
   just have the programs on our =PATH=. This is what =nix-env= is for.

   =nix-env= maintains a symlink tree, called a /profile/, of installed
   programs. The active profile is pointed to by a symlink at =~/.nix-profile=.
   By default, this profile points to
   =/nix/var/nix/profiles/per-user/$USER/profile=. But you can point your
   =~/.nix-profile= to any writable location with the =--switch-profile=
   switch:

   #+BEGIN_SRC shell :eval no
     nix-env --switch-profile /nix/var/nix/profiles/per-user/$USER/another-profile
   #+END_SRC

   This way, you can just put =~/.nix-profile/bin= on your =PATH=, and any
   programs installed in your currently active profile will be available for
   interactive use or scripts.

   We can query what's installed in the active profile with the =--query=
   switch:

   #+BEGIN_SRC shell :eval no
     nix-env --query
   #+END_SRC

   To install the {{{package-exe}}} executable, which is accessed by the
   {{{package-attr}}} in our top-level =default.nix= file, we'd run the
   following:

   #+BEGIN_SRC shell :eval no :noweb yes
     nix-env --install --file . --attr <<get("package-attr")>> 2>&1
   #+END_SRC

   #+BEGIN_SRC shell :dir .. :results output :exports results :noweb yes :post crop(text=*this*, first-n=0, last-n=3)
     mkdir nix-profile
     nix-env --profile nix-profile/doc --install --file . --attr <<get("package-attr")>> 2>&1
   #+END_SRC

   #+RESULTS:
   : installing 'nix-project'

   We can see this installation by querying what's been installed:

   #+BEGIN_SRC shell :eval no
     nix-env --query
   #+END_SRC

   #+BEGIN_SRC shell :dir .. :results output :exports results :noweb yes
     nix-env --profile nix-profile/doc --query
   #+END_SRC

   #+RESULTS:
   : nix-project

   And if we want to uninstall a program from our active profile, we do so by
   its name, in this case {{{package-name}}}:

   #+BEGIN_SRC shell :eval no :noweb yes
     nix-env --uninstall <<get("package-name")>> 2>&1
   #+END_SRC

   #+BEGIN_SRC shell :dir .. :results output :exports results :noweb yes
     nix-env --profile nix-profile/doc --uninstall <<get("package-name")>> 2>&1
   #+END_SRC

   #+RESULTS:
   : uninstalling 'nix-project'

   Note that we've installed our package using its attribute path
   ({{{package-attr}}}) within the referenced Nix expression. But we uninstall
   it using the package name ({{{package-name}}}), which may or may not be the
   same as the attribute path. When a package is installed, Nix keeps no
   reference to the expression that evaluated to the derivation of the
   installed package. The attribute path is only relevant to this expression.
   In fact, two different expressions could evaluate to the exact same
   derivation, but use different attribute paths. This is why we uninstall
   packages by their package name.

   See the [[nix-env][documentation for =nix-env=]] for more details.

** Garbage collection

   Old versions of packages stick around in =/nix/store=. We can clean this up
   with garbage collection by calling =nix-collect-garbage=.

   For each package, Nix is aware of all references back to =/nix/store= for
   other packages, whether in text files or binaries. This allows Nix to
   prevent the deletion of a runtime dependency required by another package.

   Symlinks pointing to packages to exclude from garbage collection are
   maintained by Nix in =/nix/var/nix/gcroots=. Looking closer, you'll see that
   for each "result" symlink created by a =nix build= invocation, there's symlinks in
   =/nix/var/nix/gcroots/auto= pointing back it. So we've got symlinks in
   =/nix/var/nix/gcroots/auto= pointing to "result" symlinks in our projects,
   which then reference the actual built project in =/nix/store=.

   These symlinks prevent packages built by =nix build= from being garbage
   collected. If you want a package you've built with =nix build= to be garbage
   collected, delete the "result" symlink created before calling
   =nix-collect-garbage=. Breaking symlinks under =/nix/var/nix/gcroots=
   removes protection from garbage collection. =nix-collect-garbage= will
   cleans up broken symlinks when it runs.

   Also, it's good to know that =nix-collect-garbage= won't delete packages
   referenced by any running processes. In the case of =nix run= no garbage
   collection root symlink is created under =/nix/var/nix/gcroots=, but while
   =nix run= is running a =nix-collect-garbage= won't delete packages needed by
   the invocation. However, once the =nix run= call exits, any packages pulled
   from a substituter or built locally are candidates for deletion by
   =nix-collect-garbage=. If you called =nix run= again after garbage
   collecting, those packages might be pulled or built again.

** Understanding derivations
   :PROPERTIES:
   :CUSTOM_ID: nix-drv
   :END:

   We haven't detailed what happens when we build a Nix expression that
   evaluates to a package derivation. There are two important steps:

   1. /instantiating/ the derivation
   2. /realizing/ the instantiated derivation, which builds the final package.

   An instantiated derivation is effectively a script stored in =/nix/store=
   that Nix can run to build the final package (which also ends up in
   =/nix/store=). These instantiated derivations have a ".drv" extension, and
   if you look in =/nix/store= you may find some. Instantiated derivations have
   references to all necessary build dependencies, also in =/nix/store=, which
   means that everything is physically in place in =/nix/store= to build the
   package. No further evaluation of a Nix expression is needed once we have an
   instantiated derivation to build the final package. Note that both =nix
   build= and =nix run= perform both instantiation and realization of a
   derivation, so for the most part, we don't have to worry about the
   difference between instantiating and realizing a derivation.

   However, you may encounter a Nix expression where =nix search= returns
   nothing, though you're sure that there are derivations to select out. In
   this case, the Nix expression is using an advanced technique that
   unfortunately hides attributes from =nix search= until some derivations are
   instantiated into =/nix/store=. We can force the instantiation of these
   derivations without realizing their packages with the following command:

   #+BEGIN_SRC shell :dir .. :results output silent
     nix show-derivation --file default.nix
   #+END_SRC

   Once these derivations are instantiated, you may get more results with =nix
   search= for the occasional Nix expression that uses some advanced
   techniques.

** Lazy evaluation

   We haven't made a big deal of it, but the Nix language is /lazily
   evaluated/. This allows a single Nix expression to refer to several thousand
   packages, but without requiring us to evaluate everything when selecting out
   packages by attribute paths. In fact, the entire NixOS operating system is
   based heavily on a single single expression managed in a Git repository
   called [[nixpkgs][Nixpkgs]].

* Next Steps

  This document has covered a fraction of Nix usage, hopefully enough to
  introduce Nix in the context of [[file:../README.org][this project]].

  An obvious place to start learn more about Nix is [[nix-learn][the official documentation]].
  The author of this project also maintains another project with [[nix-tutorial][a small
  tutorial on Nix]]. This tutorial covers the Nix expression language in more
  detail.

  All the commands we've covered have more switches and options. See the
  respective man-pages for more. Also, we didn't cover =nix-shell=, which can
  be used for setting up development environments. And we didn't cover much of
  [[nixpkgs][Nixpkgs]], the gigantic repository of community-curated Nix expressions.

  The Nix ecosystem is vast. This project and documentation illustrates just a
  small example of what Nix can do.

* Org-mode Teardown :noexport:

  #+CALL: cleanup()
